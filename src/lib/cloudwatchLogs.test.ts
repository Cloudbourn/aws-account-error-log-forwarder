import { describe, expect, test } from 'vitest'
import { unzipLogdata } from './cloudwatchLogs'

const sampleEvent = (): AWSLambda.CloudWatchLogsEvent => ({
  awslogs: { data: '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' },
})

describe('unzipLogdata()', () => {
  test('does its job', async () => {
    const { awslogs: { data } } = sampleEvent()

    const unzippedLogData = await unzipLogdata(data)
    expect(unzippedLogData).toMatchObject({
      logGroup: expect.any(String),
      logStream: expect.any(String),
      logEvents: expect.arrayContaining([
        expect.objectContaining({
          id: expect.any(String),
          message: expect.any(String),
          timestamp: expect.any(Number),
        }),
      ]),
    })
  })
})
